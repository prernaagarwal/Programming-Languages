CS 320 Principles of Programming Languages
Homework 2
Due Monday 10/22 before class (6:40pm)


1. (5 points)

Imagine you're asked to build a program that translates Javascript code into
Python code. What does it mean to claim this program is correct with respect to
the Javascript and Python interpreters? How would you test this claim?


2. (6 points)

Consider the following C program.

  int main(int argc, char** argv) {
    int x = 1, y = 2, z = 3;
    int w = x * y + z;
    return 0;
  }

For each of the following compiler phases, describe a single change you could
make to this program that would cause the compiler to emit an error in that
phase.

a) source input
b) lexical analysis
c) parsing


3. (8 points)

For each of the following, give a fixity (precedence and associativity) for the
infix operators in the string so that the string would parse as intended, or
give a reason why it's impossible. Assume anything that isn't a letter or a
parenthesis is a binary operator.

For example, if we wanted the string "A * B * C + D + E" to parse as
"((A * (B * C)) + D) + E", we could give the operators the following fixities:
  
  + is left-associative with precedence 1
  * is right-associative with precedence 2

However, the string "A + B + C + D" can't possibly parse as
"(A + B) + (C + D)", because the + operator must be left-associative,
right-associative, or non-associative, and none of those associativity choices
choice will produce that parenthesization.

Keep in mind that we're only dealing with syntax here - the meanings of the
operators are completely irrelevant!

In most cases there will be multiple valid answers, but you only have to give
one.

  a) "A * B + C * D" parses as "(A * B) + (C * D)"
  b) "A & B ^ C | D | E" parses as "(A & (B ^ C)) | (D | E)"
  c) "A % B @ C = D % E @ F" parses as "((A % B) @ C) = (D % (E @ F))"
  d) "A + B * C = A * B + A * C" parses as "((A + B) * C) = ((A * (B + A)) * C)"


4. (6 points)

The week 3 slides define an unambiguous CFG for a small arithmetic language
(where "n" is taken to be any natural number):

  E --> P
  E --> E + P
  P --> A
  P --> P * A
  A --> (E)
  A --> n

In this grammar, both the + and the * operator are left-associative, and * has
a higher precedence than +. This is enforced by the rules of the grammar, which
divides arithmetic expressions into three categories:

  - E represents expressions involving the + operator, only allowing other E
    expressions on the right if they're within parentheses.

  - P represents expressions involving the * operator, only allowing other P
    expressions on the right or E expressions on either side if they're within
    parentheses.

  - A represents numeric literals or parenthesized expressions.

Here are some example leftmost derivations using this CFG:

  "E" -> "P" -> "A" -> "10"

  "E" -> "E + P" -> "P + P" -> "A + P" -> "1 + P" -> "1 + A" -> "1 + 2"

  "E" -> "E + P" -> "E + P + P" -> "P + P + P" -> "A + P + P" ->
  "1 + P + P" -> "1 + A + P" -> "1 + (E) + P" -> "1 + (P) + P" ->
  "1 + (P * A) + P" -> "1 + (A * A) + P" -> "1 + (2 * A) + P" ->
  "1 + (2 * 3) + P" -> "1 + (2 * 3) + A" -> "1 + (2 * 3) + 4"

Modify the CFG to add a new nonterminal X, representing expressions involving
an infix exponent operator (^), so that the ^ operator is right-associative and
has higher precedence than both + and *. The CFG should remain unambiguous, so
that there is exactly one valid leftmost derivation that produces any given
expression in the language. Give two example leftmost derivations that involve
the ^ operator.


Questions 5 through 7 are in hw2.lhs.
